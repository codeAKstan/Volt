"use client"

import { useState } from "react"
import { format } from "date-fns"
import { CalendarIcon, Clock, Users, MapPin } from "lucide-react"
import { Plus } from "lucide-react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "sonner"
import { bookingApi } from "@/lib/api"

export function NewBookingModal({ onSuccess }) {
  const router = useRouter()
  const [open, setOpen] = useState(false)
  const [loading, setLoading] = useState(false)
  const [date, setDate] = useState(new Date())
  const [formData, setFormData] = useState({
    title: "",
    workspaceType: "",
    startTime: "",
    endTime: "",
    attendees: "",
    notes: "",
  })

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name, value) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)

    try {
      // Format the date for the API
      const formattedDate = format(date, "yyyy-MM-dd")

      // Create the booking
      const newBooking = {
        id: Date.now(), // This would be generated by the server in a real app
        title: formData.title,
        date: formattedDate,
        startTime: formData.startTime,
        endTime: formData.endTime,
        workspaceType: formData.workspaceType,
        workspaceName: `${formData.workspaceType} ${Math.floor(Math.random() * 10) + 1}`, // Mock data
        attendees: formData.attendees
          .split(",")
          .map((a) => a.trim())
          .filter((a) => a),
        notes: formData.notes,
        status: "confirmed",
      }

      // In a real app, this would be an API call
      await bookingApi.create(newBooking)

      toast.success("Booking created successfully!")
      setOpen(false)

      // Reset form
      setFormData({
        title: "",
        workspaceType: "",
        startTime: "",
        endTime: "",
        attendees: "",
        notes: "",
      })
      setDate(new Date())

      // Notify parent component
      if (onSuccess) {
        onSuccess(newBooking)
      }
    } catch (error) {
      console.error("Error creating booking:", error)
      toast.error("Failed to create booking. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const isFormValid = () => {
    return (
      formData.title.trim() !== "" &&
      formData.workspaceType !== "" &&
      formData.startTime !== "" &&
      formData.endTime !== ""
    )
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button className="mt-4" onClick={() => router.push("/dashboard/workspaces")}>
        <Plus className="mr-2 h-4 w-4" />
        New Booking
      </Button>
      </DialogTrigger>
      {/* <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Create New Booking</DialogTitle>
          <DialogDescription>Book a workspace for your meeting or individual work.</DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="title">Booking Title</Label>
              <Input
                id="title"
                name="title"
                placeholder="Team Meeting"
                value={formData.title}
                onChange={handleChange}
                required
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label>Date</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className="w-full justify-start text-left font-normal">
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date ? format(date, "PPP") : "Select date"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={date}
                      onSelect={setDate}
                      initialFocus
                      disabled={(date) => date < new Date()}
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="workspaceType">Workspace Type</Label>
                <Select
                  value={formData.workspaceType}
                  onValueChange={(value) => handleSelectChange("workspaceType", value)}
                  required
                >
                  <SelectTrigger id="workspaceType">
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="desk">Desk</SelectItem>
                    <SelectItem value="meeting_room">Meeting Room</SelectItem>
                    <SelectItem value="conference_room">Conference Room</SelectItem>
                    <SelectItem value="phone_booth">Phone Booth</SelectItem>
                    <SelectItem value="video_conference">Video Conference Room</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="startTime">Start Time</Label>
                <div className="flex items-center">
                  <Clock className="mr-2 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="startTime"
                    name="startTime"
                    type="time"
                    value={formData.startTime}
                    onChange={handleChange}
                    required
                  />
                </div>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="endTime">End Time</Label>
                <div className="flex items-center">
                  <Clock className="mr-2 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="endTime"
                    name="endTime"
                    type="time"
                    value={formData.endTime}
                    onChange={handleChange}
                    required
                  />
                </div>
              </div>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="attendees" className="flex items-center">
                <Users className="mr-2 h-4 w-4 text-muted-foreground" />
                Attendees (optional)
              </Label>
              <Input
                id="attendees"
                name="attendees"
                placeholder="Enter names or emails, separated by commas"
                value={formData.attendees}
                onChange={handleChange}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="notes" className="flex items-center">
                <MapPin className="mr-2 h-4 w-4 text-muted-foreground" />
                Notes (optional)
              </Label>
              <Textarea
                id="notes"
                name="notes"
                placeholder="Add any additional information"
                value={formData.notes}
                onChange={handleChange}
                className="resize-none"
                rows={3}
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={!isFormValid() || loading}>
              {loading ? "Creating..." : "Create Booking"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent> */}
    </Dialog>
  )
}
